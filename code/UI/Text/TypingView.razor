@namespace Sandtype.UI.Text
@attribute [StyleSheet("TypingView.razor.scss")]
@using System
@using System.Collections.Generic
@using System.Security.Principal
@using Sandbox
@using Sandbox.UI
@inherits Sandbox.UI.Panel

<root>
	<div class="text-container">
		<div class="text-line">
			@{
				// todo unfuck
				int currentChar = 0;
				int startWord = Math.Max(0, _inputWords.Count - 3);
				int endWord = Math.Max(0, _inputWords.Count + 30);
				for ( int wordIndex = startWord; wordIndex < endWord; wordIndex++ )
				{
					if ( currentChar > _charLimit )
					{
						break;
					}

					if ( wordIndex >= _targetWords.Count )
					{
						break;
					}

					string word = _targetWords[wordIndex];
					int wordLength = word.Length;

					if ( wordIndex == _currentWord )
					{
						int length = Math.Max( wordLength, _currentInput.Length );
						for ( int letterIndex = 0; letterIndex < length; letterIndex++ )
						{
							var input = letterIndex < _currentInput.Length ? _currentInput[letterIndex] : word[letterIndex];
							input = input == ' ' ? '_' : input;
							if ( letterIndex == _currentInput.Length )
							{
								<label style="color: white;">@input</label>
							}
							else if ( letterIndex < word.Length )
							{
								if ( input == word[letterIndex] )
								{
									<label style="color: black;">@input</label>
								}
								else
								{
									<label style="color: red;">@input</label>
								}
							} else if ( letterIndex >= word.Length )
							{
								<label style="color: red;">@input</label>
							}
							currentChar += 1;
						}
					}
					else if ( wordIndex < _inputWords.Count )
					{
						var currentWord = _inputWords[wordIndex];
						int length = Math.Max( wordLength, currentWord.Length );
						for ( int letterIndex = 0; letterIndex < length; letterIndex++ )
						{
							<label style="color: green;">@currentWord[letterIndex]</label>
							currentChar += 1;
						}
					}
					else
						for ( int letterIndex = 0; letterIndex < word.Length; letterIndex++ )
						{
							<label style="color: black;">@word[letterIndex]</label>
							currentChar += 1;
						}
					{
					}
					
					currentChar += 1;
					
					if ( wordIndex != _targetWords.Count )
					{
						<label>@(" ")</label>
					}
				}
			}
		</div>
	</div>
</root>

@code {

	private int _charLimit = 70;
	public TypingTest Test;
	
	// string content
	private List<string> _targetWords => Test?.TargetWords ?? new List<string>();
	private List<string> _inputWords => Test?.InputWords ?? new List<string>();
	public string _currentInput => Test?.CurrentInputText ?? "";

	private int _cursorIndex => _currentInput.Length;
	private int _currentWord => _inputWords.Count;

	private int _startWord => 0;
	private int _endWord => 0;


	protected override int BuildHash()
	{
		HashCode code = new HashCode();
		_targetWords.ForEach( str => code.Add( str ) );
		_inputWords.ForEach( str => code.Add( str ) );
		code.Add( _currentInput );
		code.Add( _currentWord );
		return code.ToHashCode();
	}
	
	private int GetCharsTyped()
	{
		int chars = 0;
		for ( int i = 0; i < _inputWords.Count; i++ )
		{
			for ( int j = 0; j < _inputWords[i].Length; j++ )
			{
				chars += 1;
			}

			if ( i != _inputWords.Count )
			{
				chars += 1; // count the space
			}
		}
		return chars + _currentInput.Length;
	}

}
